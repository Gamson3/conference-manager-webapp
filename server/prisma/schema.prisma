// This is your Prisma schema file,

generator client {
  provider        = "prisma-client-js"
  // output   = "../src/generated/prisma"
  // output   = "../node_modules/@prisma/client"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

enum Role {
  attendee
  organizer
  admin
}

enum PresentationStatus {
  draft
  submitted
  scheduled
  locked
}

enum SubmissionType {
  internal
  external
}

enum ConferenceStatus {
  draft
  published
  canceled
  completed
}

enum SectionType {
  presentation
  break
  keynote
  workshop
  panel
  networking
}


model User {
  id                  Int      @id @default(autoincrement())
  cognitoId           String   @unique // Cognito ID for authentication
  name                String
  email               String   @unique
  password            String
  role                Role
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  conferences              Conference[]       @relation("OrganizerConferences")
  authorAssignments        AuthorAssignment[] @relation("InternalAuthor")
  assignedAuthors          AuthorAssignment[] @relation("AssignedBy")
  impersonations           ImpersonationLog[] @relation("Impersonator")
  impersonatedBy           ImpersonationLog[] @relation("ImpersonatedUser")
  attendances              Attendance[]
  conferenceFavorites      ConferenceFavorite[]
  lockedPresentations      Presentation[]     @relation("LockedByUser")
  presentationFavorites    PresentationFavorite[] // Opposite relation for PresentationFavorite
  authoredPresentations PresentationAuthor[] @relation("InternalPresentationAuthor")

  // New fields
  bio                 String? @db.Text
  profileImage        String?
  phoneNumber         String?
  address             String?
  organization        String?
  jobTitle            String?
  socialLinks         Json? // Store social media links as JSON

  // New relations
  conferenceFeedback       ConferenceFeedback[]
  presentationFeedback     PresentationFeedback[]
  notifications            Notification[]
  sessionAttendance        SessionAttendance[]
  abstractSubmissions      AbstractSubmission[] // For submitter relation
  abstractReviews          AbstractReview[]
}

model Conference {
  id          Int              @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  location    String?
  status      ConferenceStatus @default(draft) // New field: Values can be "draft", "published", "canceled"
  topics      String[]         @default([]) // New field: Array of topic strings
  createdById Int
  createdBy   User             @relation("OrganizerConferences", fields: [createdById], references: [id])
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt @default(now()) // Added this for better tracking

  sections    Section[]
  attendances Attendance[]

  // Add this relation for days
  days        Day[]
  favorites ConferenceFavorite[]

  // New fields
  capacity             Int?
  registrationDeadline DateTime?
  isPublic             Boolean   @default(true)
  timezone             String?   @default("UTC")
  websiteUrl           String?
  venue                String?
  venueAddress         String?
  organizerNotes       String?   @db.Text
  bannerImageUrl       String?

  // New relations
  feedback            ConferenceFeedback[]
  materials           ConferenceMaterial[]
  abstractSubmissions AbstractSubmission[]

  @@index([name])
  @@index([topics])
  @@index([status])
  @@index([startDate])
}

model ConferenceFavorite {
  id           Int      @id @default(autoincrement())
  userId       Int
  conferenceId Int
  createdAt    DateTime @default(now())
  
  user       User       @relation(fields: [userId], references: [id])
  conference Conference @relation(fields: [conferenceId], references: [id])
  
  @@unique([userId, conferenceId])
}

model Day {
  id           Int      @id @default(autoincrement())
  conferenceId Int
  date         DateTime
  name         String   // "Day 1", "Opening Day", etc.
  order        Int      @default(0)
  
  conference Conference @relation(fields: [conferenceId], references: [id])
  sections   Section[]
  
  @@unique([conferenceId, date])
  @@index([conferenceId, date])
}

model Section {
  id           Int        @id @default(autoincrement())
  name         String
  startTime    DateTime?
  endTime      DateTime?
  conferenceId Int
  dayId        Int?
  day          Day?       @relation(fields: [dayId], references: [id])
  order        Int        @default(0)

  conference   Conference @relation(fields: [conferenceId], references: [id])

  presentations Presentation[]

  // New fields
  room        String?
  capacity    Int?
  description String?
  type        SectionType @default(presentation) // "keynote", "workshop", "panel", etc.

  // New relations
  attendees SessionAttendance[]

  @@index([name])
  @@index([startTime])
  @@index([type])
}

model AbstractSubmission {
  id           Int              @id @default(autoincrement())
  title        String
  content      String           @db.Text
  submitterId  Int
  submitter    User             @relation(fields: [submitterId], references: [id])
  conferenceId Int
  conference   Conference       @relation(fields: [conferenceId], references: [id])
  status       String // submitted, under review, accepted, rejected
  reviews      AbstractReview[]

  // Add these timestamp fields
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  submissionDate DateTime         @default(now()) // The official submission date
}

model AbstractReview {
  id             Int                @id @default(autoincrement())
  abstractId     Int
  abstract       AbstractSubmission @relation(fields: [abstractId], references: [id])
  reviewerId     Int
  reviewer       User               @relation(fields: [reviewerId], references: [id])
  score          Int // 1-5 or similar
  comments       String?            @db.Text
  recommendation String // accept, reject, revise
}

model Presentation {
  id             Int                @id @default(autoincrement())
  title          String
  abstract       String?            @db.Text
  affiliations   String[] // Stored as array of text
  keywords       String[] // Ensure 5+ in application logic
  duration       Int?               // minutes
  order          Int                @default(0)

  status         PresentationStatus
  submissionType SubmissionType
  sectionId      Int
  section        Section            @relation(fields: [sectionId], references: [id])
  createdAt      DateTime           @default(now())
  lockedById     Int?
  lockedBy       User?              @relation("LockedByUser", fields: [lockedById], references: [id])

  // Relations
  authors        PresentationAuthor[]
  favorites      PresentationFavorite[]
  authorAssignments AuthorAssignment[]
  impersonationLogs ImpersonationLog[]
  materials         PresentationMaterial[]
  feedback          PresentationFeedback[]

  @@index([title])
  @@index([keywords])
}

model PresentationAuthor {
  id             Int     @id @default(autoincrement())
  presentationId Int
  authorName     String
  authorEmail    String?
  affiliation    String?
  isPresenter    Boolean @default(false)
  isExternal     Boolean @default(true)  // Add this to distinguish external/internal
  order          Int     @default(0)

  // Optional link to internal user
  userId         Int?
  internalUser   User?   @relation("InternalPresentationAuthor", fields: [userId], references: [id])
  
  presentation   Presentation @relation(fields: [presentationId], references: [id], onDelete: Cascade)

  @@index([authorName])
  @@index([authorEmail])
}

model PresentationFavorite {
  id             Int      @id @default(autoincrement())
  userId         Int
  presentationId Int
  createdAt      DateTime @default(now())
  
  user           User         @relation(fields: [userId], references: [id])
  presentation   Presentation @relation(fields: [presentationId], references: [id])
  
  @@unique([userId, presentationId])
}

model AuthorAssignment {
  id                   Int     @id @default(autoincrement())
  userId               Int? // Internal author
  externalEmail        String? // External author
  presentationId       Int
  assignedById         Int
  secureSubmissionLink String  @unique

  internalAuthor       User?        @relation("InternalAuthor", fields: [userId], references: [id])
  assignedBy           User         @relation("AssignedBy", fields: [assignedById], references: [id])
  presentation         Presentation @relation(fields: [presentationId], references: [id], onDelete: Cascade)
}

model Attendance {
  id           Int      @id @default(autoincrement())
  userId       Int
  conferenceId Int
  checkInTime  DateTime @default(now())
  status       String   @default("registered") // registered, attended, canceled
  registeredAt DateTime @default(now())

  user         User       @relation(fields: [userId], references: [id])
  conference   Conference @relation(fields: [conferenceId], references: [id])
}

// Many-to-many for session attendance
model SessionAttendance {
  id          Int       @id @default(autoincrement())
  userId      Int
  sectionId   Int
  createdAt   DateTime @default(now())
  checkedIn   Boolean   @default(false)
  checkinTime DateTime?

  user    User    @relation(fields: [userId], references: [id])
  section Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@unique([userId, sectionId])
}

// Conference materials (slides, documents, etc.)
model ConferenceMaterial {
  id           Int      @id @default(autoincrement())
  conferenceId Int
  title        String
  description  String?
  fileUrl      String
  fileType     String
  uploadedAt   DateTime @default(now())
  isPublic     Boolean  @default(true)

  conference Conference @relation(fields: [conferenceId], references: [id])
}


// Ticket types and pricing
// model Ticket {
//   id            Int              @id @default(autoincrement())
//   name          String
//   description   String?
//   price         Decimal          @db.Decimal(10, 2)
//   quantity      Int
//   availableFrom DateTime
//   availableTo   DateTime
//   conferenceId  Int
//   conference    Conference       @relation(fields: [conferenceId], references: [id])
//   purchases     TicketPurchase[]
// }

// Ticket purchases by users
// model TicketPurchase {
//   id           Int      @id @default(autoincrement())
//   ticketId     Int
//   userId       Int
//   purchaseDate DateTime @default(now())
//   status       String   @default("completed") // completed, refunded, canceled

//   ticket Ticket @relation(fields: [ticketId], references: [id])
//   user   User   @relation(fields: [userId], references: [id])
// }

// Presentation materials
model PresentationMaterial {
  id             Int      @id @default(autoincrement())
  presentationId Int
  title          String
  description    String?
  fileUrl        String
  fileType       String
  uploadedAt     DateTime @default(now())
  isPublic       Boolean  @default(true)

  presentation Presentation @relation(fields: [presentationId], references: [id], onDelete: Cascade)
}

// Feedback for conferences
model ConferenceFeedback {
  id           Int      @id @default(autoincrement())
  conferenceId Int
  userId       Int
  rating       Int 
  comments     String?  @db.Text
  submittedAt  DateTime @default(now())

  conference   Conference @relation(fields: [conferenceId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

// Feedback for presentations
model PresentationFeedback {
  id             Int      @id @default(autoincrement())
  presentationId Int
  userId         Int
  rating         Int 
  comments       String?  @db.Text
  submittedAt    DateTime @default(now())

  presentation   Presentation @relation(fields: [presentationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id])
}


// User notifications
model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model ImpersonationLog {
  id                 Int      @id @default(autoincrement())
  impersonatorId     Int
  impersonatedUserId Int
  actionTaken        String
  timestamp          DateTime @default(now())
  presentationId     Int?

  impersonator       User          @relation("Impersonator", fields: [impersonatorId], references: [id])
  impersonatedUser   User          @relation("ImpersonatedUser", fields: [impersonatedUserId], references: [id])
  presentation       Presentation? @relation(fields: [presentationId], references: [id])
}